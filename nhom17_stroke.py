# -*- coding: utf-8 -*-
"""Nhom17_Stroke.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C9RIbIujOizSyEziVblmJn1jQcNYyegB
"""

import pandas as pd
from sklearn.model_selection import train_test_split, KFold
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import joblib

# Đọc dữ liệu
df = pd.read_csv('/content/healthcare-dataset-stroke-data.csv')

# dimensions of data
df.shape

#id , giới tính, tuổi, tăng huyết áp,bệnh tim, tình trạng hôn nhân, công việc, Nơi cư trú, lượng đường tb, chỉ số khối cơ thể, đã từng hút thuốc, đột quỵ
df.columns

df.info()

df.describe()

# Xử lý dữ liệu thiếu
df['bmi'].fillna(df['bmi'].mean(), inplace=True)

df['bmi'].isnull().sum()



# tiền xử lí dữ liệu
lb_make = LabelEncoder()

df['gender'] = lb_make.fit_transform(df['gender'])
df['age'] = lb_make.fit_transform(df['age'])
df['hypertension'] = lb_make.fit_transform(df['hypertension'])
df['heart_disease'] = lb_make.fit_transform(df['heart_disease'])
df['ever_married'] = lb_make.fit_transform(df['ever_married'])
df['work_type'] = lb_make.fit_transform(df['work_type'])
df['Residence_type'] = lb_make.fit_transform(df['Residence_type'])
df['avg_glucose_level'] = lb_make.fit_transform(df['avg_glucose_level'])
df['bmi'] = lb_make.fit_transform(df['bmi'])
df['smoking_status'] = lb_make.fit_transform(df['smoking_status'])
df['stroke'] = lb_make.fit_transform(df['stroke'])
df.head(10)

# chuẩn hóa dữ liệu của mình về 0 và 1 -> model chạy nhanh hơn và chính xác
scaler = MinMaxScaler(feature_range=(0,1))
scaler_cols=['age','avg_glucose_level','bmi']
df[scaler_cols] = scaler.fit_transform(df[scaler_cols])

# Xây dựng mô hình
features = ['gender',
            'age',
            'hypertension',
            'heart_disease',
            'ever_married',
            'work_type',
            'Residence_type',
            'avg_glucose_level',
            'bmi',
            'smoking_status']
target =['stroke']
x= df[features]
y= df[target]
print(x)
print(y)

# Sử dụng KFold để chia dữ liệu thành các fold
kf = KFold(n_splits=5, shuffle=True, random_state=0)
fold_count = 1

# Lists để lưu trữ kết quả
confusion_matrices = []
classification_reports = []
accuracies = []

# Loop qua từng fold và huấn luyện mô hình
for train_index, test_index in kf.split(x):
    X_train, X_test = x.iloc[train_index], x.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Khởi tạo và huấn luyện mô hình
    model = MultinomialNB()
    model.fit(X_train, y_train)
    prediction = model.predict(X_test)

    # Tính độ chính xác và lưu trữ kết quả
    accuracy = accuracy_score(y_test, prediction) * 100  # Nhân với 100 để chuyển thành phần trăm
    accuracies.append(accuracy)
    confusion_matrices.append(confusion_matrix(y_test, prediction))
    classification_reports.append(classification_report(y_test, prediction))

    # In kết quả của fold hiện tại
    print(f"Fold {fold_count}:")
    print("Confusion Matrix:")
    print(confusion_matrices[-1])
    print("Classification Report:")
    print(classification_reports[-1])
    print(f"Accuracy: {accuracy:.2f}%")  # In độ chính xác dưới dạng phần trăm, làm tròn đến 2 chữ số thập phân
    print("\n")

    fold_count += 1

# In độ chính xác trung bình của các fold
print("Mean Accuracy:", sum(accuracies) / len(accuracies))

#  sử dụng mô hình dự đoán với dữ liệu sau
# giới tính nam -1, tuổi tác - 80, cao huyết áp không - 0, bệnh tim không bị - 0
# tình trạng hôn nhân đã kết hôn  - 1, loại công việc tự kinh doanh - 4, Nơi cư trú nông thôn - 0
# lượng đường trung bình trong máu 2500, chỉ số bmi 99, trạng thái đã từng hút thuốc - 3
# nhập bệnh nhân mới
new_patient =[[1,80,0,0,1,4,0,2500,99,3]]
predicted_lable = model.predict(new_patient)# dự đoán
if predicted_lable ==0:
  print("bạn không bị đột quỵ")
else:
  print("bạn đã bị bệnh đột quỵ")

joblib.dump(model,"Stroke.mdl")

# đọc mô hình từ tệp
model_loaded = joblib.load("Stroke.mdl")
new_patient =[[1,80,0,0,1,4,0,2500,99,3]]
predicted_lable = model.predict(new_patient)# dự đoán
if predicted_lable ==0:
  print("bạn không bị đột quỵ")
else:
  print("bạn đã bị bệnh đột quỵ")